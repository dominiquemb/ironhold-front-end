package com.reqo.ironhold.storage.thrift;
/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class MimeMailMessageStorage {

    public interface Iface {

        public long store(String clientName, String partition, String subPartition, String messageId, String message, String checkSum) throws org.apache.thrift.TException;

        public boolean exists(String clientName, String partition, String subPartition, String messageId) throws org.apache.thrift.TException;

        public String get(String clientName, String partition, String subPartition, String messageId) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void store(String clientName, String partition, String subPartition, String messageId, String message, String checkSum, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.store_call> resultHandler) throws org.apache.thrift.TException;

        public void exists(String clientName, String partition, String subPartition, String messageId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.exists_call> resultHandler) throws org.apache.thrift.TException;

        public void get(String clientName, String partition, String subPartition, String messageId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_call> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public long store(String clientName, String partition, String subPartition, String messageId, String message, String checkSum) throws org.apache.thrift.TException {
            send_store(clientName, partition, subPartition, messageId, message, checkSum);
            return recv_store();
        }

        public void send_store(String clientName, String partition, String subPartition, String messageId, String message, String checkSum) throws org.apache.thrift.TException {
            store_args args = new store_args();
            args.setClientName(clientName);
            args.setPartition(partition);
            args.setSubPartition(subPartition);
            args.setMessageId(messageId);
            args.setMessage(message);
            args.setCheckSum(checkSum);
            sendBase("store", args);
        }

        public long recv_store() throws org.apache.thrift.TException {
            store_result result = new store_result();
            receiveBase(result, "store");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "store failed: unknown result");
        }

        public boolean exists(String clientName, String partition, String subPartition, String messageId) throws org.apache.thrift.TException {
            send_exists(clientName, partition, subPartition, messageId);
            return recv_exists();
        }

        public void send_exists(String clientName, String partition, String subPartition, String messageId) throws org.apache.thrift.TException {
            exists_args args = new exists_args();
            args.setClientName(clientName);
            args.setPartition(partition);
            args.setSubPartition(subPartition);
            args.setMessageId(messageId);
            sendBase("exists", args);
        }

        public boolean recv_exists() throws org.apache.thrift.TException {
            exists_result result = new exists_result();
            receiveBase(result, "exists");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exists failed: unknown result");
        }

        public String get(String clientName, String partition, String subPartition, String messageId) throws org.apache.thrift.TException {
            send_get(clientName, partition, subPartition, messageId);
            return recv_get();
        }

        public void send_get(String clientName, String partition, String subPartition, String messageId) throws org.apache.thrift.TException {
            get_args args = new get_args();
            args.setClientName(clientName);
            args.setPartition(partition);
            args.setSubPartition(subPartition);
            args.setMessageId(messageId);
            sendBase("get", args);
        }

        public String recv_get() throws org.apache.thrift.TException {
            get_result result = new get_result();
            receiveBase(result, "get");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void store(String clientName, String partition, String subPartition, String messageId, String message, String checkSum, org.apache.thrift.async.AsyncMethodCallback<store_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            store_call method_call = new store_call(clientName, partition, subPartition, messageId, message, checkSum, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class store_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String clientName;
            private String partition;
            private String subPartition;
            private String messageId;
            private String message;
            private String checkSum;

            public store_call(String clientName, String partition, String subPartition, String messageId, String message, String checkSum, org.apache.thrift.async.AsyncMethodCallback<store_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.clientName = clientName;
                this.partition = partition;
                this.subPartition = subPartition;
                this.messageId = messageId;
                this.message = message;
                this.checkSum = checkSum;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("store", org.apache.thrift.protocol.TMessageType.CALL, 0));
                store_args args = new store_args();
                args.setClientName(clientName);
                args.setPartition(partition);
                args.setSubPartition(subPartition);
                args.setMessageId(messageId);
                args.setMessage(message);
                args.setCheckSum(checkSum);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public long getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_store();
            }
        }

        public void exists(String clientName, String partition, String subPartition, String messageId, org.apache.thrift.async.AsyncMethodCallback<exists_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            exists_call method_call = new exists_call(clientName, partition, subPartition, messageId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class exists_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String clientName;
            private String partition;
            private String subPartition;
            private String messageId;

            public exists_call(String clientName, String partition, String subPartition, String messageId, org.apache.thrift.async.AsyncMethodCallback<exists_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.clientName = clientName;
                this.partition = partition;
                this.subPartition = subPartition;
                this.messageId = messageId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exists", org.apache.thrift.protocol.TMessageType.CALL, 0));
                exists_args args = new exists_args();
                args.setClientName(clientName);
                args.setPartition(partition);
                args.setSubPartition(subPartition);
                args.setMessageId(messageId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_exists();
            }
        }

        public void get(String clientName, String partition, String subPartition, String messageId, org.apache.thrift.async.AsyncMethodCallback<get_call> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            get_call method_call = new get_call(clientName, partition, subPartition, messageId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class get_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String clientName;
            private String partition;
            private String subPartition;
            private String messageId;

            public get_call(String clientName, String partition, String subPartition, String messageId, org.apache.thrift.async.AsyncMethodCallback<get_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.clientName = clientName;
                this.partition = partition;
                this.subPartition = subPartition;
                this.messageId = messageId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get", org.apache.thrift.protocol.TMessageType.CALL, 0));
                get_args args = new get_args();
                args.setClientName(clientName);
                args.setPartition(partition);
                args.setSubPartition(subPartition);
                args.setMessageId(messageId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_get();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("store", new store());
            processMap.put("exists", new exists());
            processMap.put("get", new get());
            return processMap;
        }

        public static class store<I extends Iface> extends org.apache.thrift.ProcessFunction<I, store_args> {
            public store() {
                super("store");
            }

            public store_args getEmptyArgsInstance() {
                return new store_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public store_result getResult(I iface, store_args args) throws org.apache.thrift.TException {
                store_result result = new store_result();
                result.success = iface.store(args.clientName, args.partition, args.subPartition, args.messageId, args.message, args.checkSum);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class exists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exists_args> {
            public exists() {
                super("exists");
            }

            public exists_args getEmptyArgsInstance() {
                return new exists_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public exists_result getResult(I iface, exists_args args) throws org.apache.thrift.TException {
                exists_result result = new exists_result();
                result.success = iface.exists(args.clientName, args.partition, args.subPartition, args.messageId);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_args> {
            public get() {
                super("get");
            }

            public get_args getEmptyArgsInstance() {
                return new get_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public get_result getResult(I iface, get_args args) throws org.apache.thrift.TException {
                get_result result = new get_result();
                result.success = iface.get(args.clientName, args.partition, args.subPartition, args.messageId);
                return result;
            }
        }

    }

    public static class store_args implements org.apache.thrift.TBase<store_args, store_args._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("store_args");

        private static final org.apache.thrift.protocol.TField CLIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientName", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("partition", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField SUB_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("subPartition", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short) 4);
        private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short) 5);
        private static final org.apache.thrift.protocol.TField CHECK_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("checkSum", org.apache.thrift.protocol.TType.STRING, (short) 6);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new store_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new store_argsTupleSchemeFactory());
        }

        public String clientName; // required
        public String partition; // required
        public String subPartition; // required
        public String messageId; // required
        public String message; // required
        public String checkSum; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CLIENT_NAME((short) 1, "clientName"),
            PARTITION((short) 2, "partition"),
            SUB_PARTITION((short) 3, "subPartition"),
            MESSAGE_ID((short) 4, "messageId"),
            MESSAGE((short) 5, "message"),
            CHECK_SUM((short) 6, "checkSum");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // CLIENT_NAME
                        return CLIENT_NAME;
                    case 2: // PARTITION
                        return PARTITION;
                    case 3: // SUB_PARTITION
                        return SUB_PARTITION;
                    case 4: // MESSAGE_ID
                        return MESSAGE_ID;
                    case 5: // MESSAGE
                        return MESSAGE;
                    case 6: // CHECK_SUM
                        return CHECK_SUM;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CLIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PARTITION, new org.apache.thrift.meta_data.FieldMetaData("partition", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SUB_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("subPartition", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.CHECK_SUM, new org.apache.thrift.meta_data.FieldMetaData("checkSum", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(store_args.class, metaDataMap);
        }

        public store_args() {
        }

        public store_args(
                String clientName,
                String partition,
                String subPartition,
                String messageId,
                String message,
                String checkSum) {
            this();
            this.clientName = clientName;
            this.partition = partition;
            this.subPartition = subPartition;
            this.messageId = messageId;
            this.message = message;
            this.checkSum = checkSum;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public store_args(store_args other) {
            if (other.isSetClientName()) {
                this.clientName = other.clientName;
            }
            if (other.isSetPartition()) {
                this.partition = other.partition;
            }
            if (other.isSetSubPartition()) {
                this.subPartition = other.subPartition;
            }
            if (other.isSetMessageId()) {
                this.messageId = other.messageId;
            }
            if (other.isSetMessage()) {
                this.message = other.message;
            }
            if (other.isSetCheckSum()) {
                this.checkSum = other.checkSum;
            }
        }

        public store_args deepCopy() {
            return new store_args(this);
        }

        @Override
        public void clear() {
            this.clientName = null;
            this.partition = null;
            this.subPartition = null;
            this.messageId = null;
            this.message = null;
            this.checkSum = null;
        }

        public String getClientName() {
            return this.clientName;
        }

        public store_args setClientName(String clientName) {
            this.clientName = clientName;
            return this;
        }

        public void unsetClientName() {
            this.clientName = null;
        }

        /**
         * Returns true if field clientName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetClientName() {
            return this.clientName != null;
        }

        public void setClientNameIsSet(boolean value) {
            if (!value) {
                this.clientName = null;
            }
        }

        public String getPartition() {
            return this.partition;
        }

        public store_args setPartition(String partition) {
            this.partition = partition;
            return this;
        }

        public void unsetPartition() {
            this.partition = null;
        }

        /**
         * Returns true if field partition is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPartition() {
            return this.partition != null;
        }

        public void setPartitionIsSet(boolean value) {
            if (!value) {
                this.partition = null;
            }
        }

        public String getSubPartition() {
            return this.subPartition;
        }

        public store_args setSubPartition(String subPartition) {
            this.subPartition = subPartition;
            return this;
        }

        public void unsetSubPartition() {
            this.subPartition = null;
        }

        /**
         * Returns true if field subPartition is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSubPartition() {
            return this.subPartition != null;
        }

        public void setSubPartitionIsSet(boolean value) {
            if (!value) {
                this.subPartition = null;
            }
        }

        public String getMessageId() {
            return this.messageId;
        }

        public store_args setMessageId(String messageId) {
            this.messageId = messageId;
            return this;
        }

        public void unsetMessageId() {
            this.messageId = null;
        }

        /**
         * Returns true if field messageId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetMessageId() {
            return this.messageId != null;
        }

        public void setMessageIdIsSet(boolean value) {
            if (!value) {
                this.messageId = null;
            }
        }

        public String getMessage() {
            return this.message;
        }

        public store_args setMessage(String message) {
            this.message = message;
            return this;
        }

        public void unsetMessage() {
            this.message = null;
        }

        /**
         * Returns true if field message is set (has been assigned a value) and false otherwise
         */
        public boolean isSetMessage() {
            return this.message != null;
        }

        public void setMessageIsSet(boolean value) {
            if (!value) {
                this.message = null;
            }
        }

        public String getCheckSum() {
            return this.checkSum;
        }

        public store_args setCheckSum(String checkSum) {
            this.checkSum = checkSum;
            return this;
        }

        public void unsetCheckSum() {
            this.checkSum = null;
        }

        /**
         * Returns true if field checkSum is set (has been assigned a value) and false otherwise
         */
        public boolean isSetCheckSum() {
            return this.checkSum != null;
        }

        public void setCheckSumIsSet(boolean value) {
            if (!value) {
                this.checkSum = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CLIENT_NAME:
                    if (value == null) {
                        unsetClientName();
                    } else {
                        setClientName((String) value);
                    }
                    break;

                case PARTITION:
                    if (value == null) {
                        unsetPartition();
                    } else {
                        setPartition((String) value);
                    }
                    break;

                case SUB_PARTITION:
                    if (value == null) {
                        unsetSubPartition();
                    } else {
                        setSubPartition((String) value);
                    }
                    break;

                case MESSAGE_ID:
                    if (value == null) {
                        unsetMessageId();
                    } else {
                        setMessageId((String) value);
                    }
                    break;

                case MESSAGE:
                    if (value == null) {
                        unsetMessage();
                    } else {
                        setMessage((String) value);
                    }
                    break;

                case CHECK_SUM:
                    if (value == null) {
                        unsetCheckSum();
                    } else {
                        setCheckSum((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CLIENT_NAME:
                    return getClientName();

                case PARTITION:
                    return getPartition();

                case SUB_PARTITION:
                    return getSubPartition();

                case MESSAGE_ID:
                    return getMessageId();

                case MESSAGE:
                    return getMessage();

                case CHECK_SUM:
                    return getCheckSum();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CLIENT_NAME:
                    return isSetClientName();
                case PARTITION:
                    return isSetPartition();
                case SUB_PARTITION:
                    return isSetSubPartition();
                case MESSAGE_ID:
                    return isSetMessageId();
                case MESSAGE:
                    return isSetMessage();
                case CHECK_SUM:
                    return isSetCheckSum();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof store_args)
                return this.equals((store_args) that);
            return false;
        }

        public boolean equals(store_args that) {
            if (that == null)
                return false;

            boolean this_present_clientName = true && this.isSetClientName();
            boolean that_present_clientName = true && that.isSetClientName();
            if (this_present_clientName || that_present_clientName) {
                if (!(this_present_clientName && that_present_clientName))
                    return false;
                if (!this.clientName.equals(that.clientName))
                    return false;
            }

            boolean this_present_partition = true && this.isSetPartition();
            boolean that_present_partition = true && that.isSetPartition();
            if (this_present_partition || that_present_partition) {
                if (!(this_present_partition && that_present_partition))
                    return false;
                if (!this.partition.equals(that.partition))
                    return false;
            }

            boolean this_present_subPartition = true && this.isSetSubPartition();
            boolean that_present_subPartition = true && that.isSetSubPartition();
            if (this_present_subPartition || that_present_subPartition) {
                if (!(this_present_subPartition && that_present_subPartition))
                    return false;
                if (!this.subPartition.equals(that.subPartition))
                    return false;
            }

            boolean this_present_messageId = true && this.isSetMessageId();
            boolean that_present_messageId = true && that.isSetMessageId();
            if (this_present_messageId || that_present_messageId) {
                if (!(this_present_messageId && that_present_messageId))
                    return false;
                if (!this.messageId.equals(that.messageId))
                    return false;
            }

            boolean this_present_message = true && this.isSetMessage();
            boolean that_present_message = true && that.isSetMessage();
            if (this_present_message || that_present_message) {
                if (!(this_present_message && that_present_message))
                    return false;
                if (!this.message.equals(that.message))
                    return false;
            }

            boolean this_present_checkSum = true && this.isSetCheckSum();
            boolean that_present_checkSum = true && that.isSetCheckSum();
            if (this_present_checkSum || that_present_checkSum) {
                if (!(this_present_checkSum && that_present_checkSum))
                    return false;
                if (!this.checkSum.equals(that.checkSum))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(store_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            store_args typedOther = (store_args) other;

            lastComparison = Boolean.valueOf(isSetClientName()).compareTo(typedOther.isSetClientName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetClientName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientName, typedOther.clientName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPartition()).compareTo(typedOther.isSetPartition());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPartition()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition, typedOther.partition);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSubPartition()).compareTo(typedOther.isSetSubPartition());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSubPartition()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subPartition, typedOther.subPartition);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(typedOther.isSetMessageId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessageId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, typedOther.messageId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetCheckSum()).compareTo(typedOther.isSetCheckSum());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCheckSum()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkSum, typedOther.checkSum);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("store_args(");
            boolean first = true;

            sb.append("clientName:");
            if (this.clientName == null) {
                sb.append("null");
            } else {
                sb.append(this.clientName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("partition:");
            if (this.partition == null) {
                sb.append("null");
            } else {
                sb.append(this.partition);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("subPartition:");
            if (this.subPartition == null) {
                sb.append("null");
            } else {
                sb.append(this.subPartition);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("messageId:");
            if (this.messageId == null) {
                sb.append("null");
            } else {
                sb.append(this.messageId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("message:");
            if (this.message == null) {
                sb.append("null");
            } else {
                sb.append(this.message);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("checkSum:");
            if (this.checkSum == null) {
                sb.append("null");
            } else {
                sb.append(this.checkSum);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class store_argsStandardSchemeFactory implements SchemeFactory {
            public store_argsStandardScheme getScheme() {
                return new store_argsStandardScheme();
            }
        }

        private static class store_argsStandardScheme extends StandardScheme<store_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, store_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CLIENT_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.clientName = iprot.readString();
                                struct.setClientNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PARTITION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.partition = iprot.readString();
                                struct.setPartitionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SUB_PARTITION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.subPartition = iprot.readString();
                                struct.setSubPartitionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // MESSAGE_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.messageId = iprot.readString();
                                struct.setMessageIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // MESSAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.message = iprot.readString();
                                struct.setMessageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 6: // CHECK_SUM
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.checkSum = iprot.readString();
                                struct.setCheckSumIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, store_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.clientName != null) {
                    oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
                    oprot.writeString(struct.clientName);
                    oprot.writeFieldEnd();
                }
                if (struct.partition != null) {
                    oprot.writeFieldBegin(PARTITION_FIELD_DESC);
                    oprot.writeString(struct.partition);
                    oprot.writeFieldEnd();
                }
                if (struct.subPartition != null) {
                    oprot.writeFieldBegin(SUB_PARTITION_FIELD_DESC);
                    oprot.writeString(struct.subPartition);
                    oprot.writeFieldEnd();
                }
                if (struct.messageId != null) {
                    oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
                    oprot.writeString(struct.messageId);
                    oprot.writeFieldEnd();
                }
                if (struct.message != null) {
                    oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                    oprot.writeString(struct.message);
                    oprot.writeFieldEnd();
                }
                if (struct.checkSum != null) {
                    oprot.writeFieldBegin(CHECK_SUM_FIELD_DESC);
                    oprot.writeString(struct.checkSum);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class store_argsTupleSchemeFactory implements SchemeFactory {
            public store_argsTupleScheme getScheme() {
                return new store_argsTupleScheme();
            }
        }

        private static class store_argsTupleScheme extends TupleScheme<store_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, store_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetClientName()) {
                    optionals.set(0);
                }
                if (struct.isSetPartition()) {
                    optionals.set(1);
                }
                if (struct.isSetSubPartition()) {
                    optionals.set(2);
                }
                if (struct.isSetMessageId()) {
                    optionals.set(3);
                }
                if (struct.isSetMessage()) {
                    optionals.set(4);
                }
                if (struct.isSetCheckSum()) {
                    optionals.set(5);
                }
                oprot.writeBitSet(optionals, 6);
                if (struct.isSetClientName()) {
                    oprot.writeString(struct.clientName);
                }
                if (struct.isSetPartition()) {
                    oprot.writeString(struct.partition);
                }
                if (struct.isSetSubPartition()) {
                    oprot.writeString(struct.subPartition);
                }
                if (struct.isSetMessageId()) {
                    oprot.writeString(struct.messageId);
                }
                if (struct.isSetMessage()) {
                    oprot.writeString(struct.message);
                }
                if (struct.isSetCheckSum()) {
                    oprot.writeString(struct.checkSum);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, store_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(6);
                if (incoming.get(0)) {
                    struct.clientName = iprot.readString();
                    struct.setClientNameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.partition = iprot.readString();
                    struct.setPartitionIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.subPartition = iprot.readString();
                    struct.setSubPartitionIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.messageId = iprot.readString();
                    struct.setMessageIdIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.message = iprot.readString();
                    struct.setMessageIsSet(true);
                }
                if (incoming.get(5)) {
                    struct.checkSum = iprot.readString();
                    struct.setCheckSumIsSet(true);
                }
            }
        }

    }

    public static class store_result implements org.apache.thrift.TBase<store_result, store_result._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("store_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new store_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new store_resultTupleSchemeFactory());
        }

        public long success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(store_result.class, metaDataMap);
        }

        public store_result() {
        }

        public store_result(
                long success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public store_result(store_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public store_result deepCopy() {
            return new store_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public long getSuccess() {
            return this.success;
        }

        public store_result setSuccess(long success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Long) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return Long.valueOf(getSuccess());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof store_result)
                return this.equals((store_result) that);
            return false;
        }

        public boolean equals(store_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(store_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            store_result typedOther = (store_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("store_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class store_resultStandardSchemeFactory implements SchemeFactory {
            public store_resultStandardScheme getScheme() {
                return new store_resultStandardScheme();
            }
        }

        private static class store_resultStandardScheme extends StandardScheme<store_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, store_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.success = iprot.readI64();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, store_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI64(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class store_resultTupleSchemeFactory implements SchemeFactory {
            public store_resultTupleScheme getScheme() {
                return new store_resultTupleScheme();
            }
        }

        private static class store_resultTupleScheme extends TupleScheme<store_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, store_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI64(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, store_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI64();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class exists_args implements org.apache.thrift.TBase<exists_args, exists_args._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exists_args");

        private static final org.apache.thrift.protocol.TField CLIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientName", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("partition", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField SUB_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("subPartition", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short) 4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new exists_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new exists_argsTupleSchemeFactory());
        }

        public String clientName; // required
        public String partition; // required
        public String subPartition; // required
        public String messageId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CLIENT_NAME((short) 1, "clientName"),
            PARTITION((short) 2, "partition"),
            SUB_PARTITION((short) 3, "subPartition"),
            MESSAGE_ID((short) 4, "messageId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // CLIENT_NAME
                        return CLIENT_NAME;
                    case 2: // PARTITION
                        return PARTITION;
                    case 3: // SUB_PARTITION
                        return SUB_PARTITION;
                    case 4: // MESSAGE_ID
                        return MESSAGE_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CLIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PARTITION, new org.apache.thrift.meta_data.FieldMetaData("partition", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SUB_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("subPartition", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exists_args.class, metaDataMap);
        }

        public exists_args() {
        }

        public exists_args(
                String clientName,
                String partition,
                String subPartition,
                String messageId) {
            this();
            this.clientName = clientName;
            this.partition = partition;
            this.subPartition = subPartition;
            this.messageId = messageId;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public exists_args(exists_args other) {
            if (other.isSetClientName()) {
                this.clientName = other.clientName;
            }
            if (other.isSetPartition()) {
                this.partition = other.partition;
            }
            if (other.isSetSubPartition()) {
                this.subPartition = other.subPartition;
            }
            if (other.isSetMessageId()) {
                this.messageId = other.messageId;
            }
        }

        public exists_args deepCopy() {
            return new exists_args(this);
        }

        @Override
        public void clear() {
            this.clientName = null;
            this.partition = null;
            this.subPartition = null;
            this.messageId = null;
        }

        public String getClientName() {
            return this.clientName;
        }

        public exists_args setClientName(String clientName) {
            this.clientName = clientName;
            return this;
        }

        public void unsetClientName() {
            this.clientName = null;
        }

        /**
         * Returns true if field clientName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetClientName() {
            return this.clientName != null;
        }

        public void setClientNameIsSet(boolean value) {
            if (!value) {
                this.clientName = null;
            }
        }

        public String getPartition() {
            return this.partition;
        }

        public exists_args setPartition(String partition) {
            this.partition = partition;
            return this;
        }

        public void unsetPartition() {
            this.partition = null;
        }

        /**
         * Returns true if field partition is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPartition() {
            return this.partition != null;
        }

        public void setPartitionIsSet(boolean value) {
            if (!value) {
                this.partition = null;
            }
        }

        public String getSubPartition() {
            return this.subPartition;
        }

        public exists_args setSubPartition(String subPartition) {
            this.subPartition = subPartition;
            return this;
        }

        public void unsetSubPartition() {
            this.subPartition = null;
        }

        /**
         * Returns true if field subPartition is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSubPartition() {
            return this.subPartition != null;
        }

        public void setSubPartitionIsSet(boolean value) {
            if (!value) {
                this.subPartition = null;
            }
        }

        public String getMessageId() {
            return this.messageId;
        }

        public exists_args setMessageId(String messageId) {
            this.messageId = messageId;
            return this;
        }

        public void unsetMessageId() {
            this.messageId = null;
        }

        /**
         * Returns true if field messageId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetMessageId() {
            return this.messageId != null;
        }

        public void setMessageIdIsSet(boolean value) {
            if (!value) {
                this.messageId = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CLIENT_NAME:
                    if (value == null) {
                        unsetClientName();
                    } else {
                        setClientName((String) value);
                    }
                    break;

                case PARTITION:
                    if (value == null) {
                        unsetPartition();
                    } else {
                        setPartition((String) value);
                    }
                    break;

                case SUB_PARTITION:
                    if (value == null) {
                        unsetSubPartition();
                    } else {
                        setSubPartition((String) value);
                    }
                    break;

                case MESSAGE_ID:
                    if (value == null) {
                        unsetMessageId();
                    } else {
                        setMessageId((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CLIENT_NAME:
                    return getClientName();

                case PARTITION:
                    return getPartition();

                case SUB_PARTITION:
                    return getSubPartition();

                case MESSAGE_ID:
                    return getMessageId();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CLIENT_NAME:
                    return isSetClientName();
                case PARTITION:
                    return isSetPartition();
                case SUB_PARTITION:
                    return isSetSubPartition();
                case MESSAGE_ID:
                    return isSetMessageId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof exists_args)
                return this.equals((exists_args) that);
            return false;
        }

        public boolean equals(exists_args that) {
            if (that == null)
                return false;

            boolean this_present_clientName = true && this.isSetClientName();
            boolean that_present_clientName = true && that.isSetClientName();
            if (this_present_clientName || that_present_clientName) {
                if (!(this_present_clientName && that_present_clientName))
                    return false;
                if (!this.clientName.equals(that.clientName))
                    return false;
            }

            boolean this_present_partition = true && this.isSetPartition();
            boolean that_present_partition = true && that.isSetPartition();
            if (this_present_partition || that_present_partition) {
                if (!(this_present_partition && that_present_partition))
                    return false;
                if (!this.partition.equals(that.partition))
                    return false;
            }

            boolean this_present_subPartition = true && this.isSetSubPartition();
            boolean that_present_subPartition = true && that.isSetSubPartition();
            if (this_present_subPartition || that_present_subPartition) {
                if (!(this_present_subPartition && that_present_subPartition))
                    return false;
                if (!this.subPartition.equals(that.subPartition))
                    return false;
            }

            boolean this_present_messageId = true && this.isSetMessageId();
            boolean that_present_messageId = true && that.isSetMessageId();
            if (this_present_messageId || that_present_messageId) {
                if (!(this_present_messageId && that_present_messageId))
                    return false;
                if (!this.messageId.equals(that.messageId))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(exists_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            exists_args typedOther = (exists_args) other;

            lastComparison = Boolean.valueOf(isSetClientName()).compareTo(typedOther.isSetClientName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetClientName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientName, typedOther.clientName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPartition()).compareTo(typedOther.isSetPartition());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPartition()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition, typedOther.partition);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSubPartition()).compareTo(typedOther.isSetSubPartition());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSubPartition()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subPartition, typedOther.subPartition);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(typedOther.isSetMessageId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessageId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, typedOther.messageId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("exists_args(");
            boolean first = true;

            sb.append("clientName:");
            if (this.clientName == null) {
                sb.append("null");
            } else {
                sb.append(this.clientName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("partition:");
            if (this.partition == null) {
                sb.append("null");
            } else {
                sb.append(this.partition);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("subPartition:");
            if (this.subPartition == null) {
                sb.append("null");
            } else {
                sb.append(this.subPartition);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("messageId:");
            if (this.messageId == null) {
                sb.append("null");
            } else {
                sb.append(this.messageId);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class exists_argsStandardSchemeFactory implements SchemeFactory {
            public exists_argsStandardScheme getScheme() {
                return new exists_argsStandardScheme();
            }
        }

        private static class exists_argsStandardScheme extends StandardScheme<exists_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, exists_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CLIENT_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.clientName = iprot.readString();
                                struct.setClientNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PARTITION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.partition = iprot.readString();
                                struct.setPartitionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SUB_PARTITION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.subPartition = iprot.readString();
                                struct.setSubPartitionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // MESSAGE_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.messageId = iprot.readString();
                                struct.setMessageIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, exists_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.clientName != null) {
                    oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
                    oprot.writeString(struct.clientName);
                    oprot.writeFieldEnd();
                }
                if (struct.partition != null) {
                    oprot.writeFieldBegin(PARTITION_FIELD_DESC);
                    oprot.writeString(struct.partition);
                    oprot.writeFieldEnd();
                }
                if (struct.subPartition != null) {
                    oprot.writeFieldBegin(SUB_PARTITION_FIELD_DESC);
                    oprot.writeString(struct.subPartition);
                    oprot.writeFieldEnd();
                }
                if (struct.messageId != null) {
                    oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
                    oprot.writeString(struct.messageId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class exists_argsTupleSchemeFactory implements SchemeFactory {
            public exists_argsTupleScheme getScheme() {
                return new exists_argsTupleScheme();
            }
        }

        private static class exists_argsTupleScheme extends TupleScheme<exists_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, exists_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetClientName()) {
                    optionals.set(0);
                }
                if (struct.isSetPartition()) {
                    optionals.set(1);
                }
                if (struct.isSetSubPartition()) {
                    optionals.set(2);
                }
                if (struct.isSetMessageId()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetClientName()) {
                    oprot.writeString(struct.clientName);
                }
                if (struct.isSetPartition()) {
                    oprot.writeString(struct.partition);
                }
                if (struct.isSetSubPartition()) {
                    oprot.writeString(struct.subPartition);
                }
                if (struct.isSetMessageId()) {
                    oprot.writeString(struct.messageId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, exists_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.clientName = iprot.readString();
                    struct.setClientNameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.partition = iprot.readString();
                    struct.setPartitionIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.subPartition = iprot.readString();
                    struct.setSubPartitionIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.messageId = iprot.readString();
                    struct.setMessageIdIsSet(true);
                }
            }
        }

    }

    public static class exists_result implements org.apache.thrift.TBase<exists_result, exists_result._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exists_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new exists_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new exists_resultTupleSchemeFactory());
        }

        public boolean success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exists_result.class, metaDataMap);
        }

        public exists_result() {
        }

        public exists_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public exists_result(exists_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public exists_result deepCopy() {
            return new exists_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public exists_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return Boolean.valueOf(isSuccess());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof exists_result)
                return this.equals((exists_result) that);
            return false;
        }

        public boolean equals(exists_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(exists_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            exists_result typedOther = (exists_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("exists_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class exists_resultStandardSchemeFactory implements SchemeFactory {
            public exists_resultStandardScheme getScheme() {
                return new exists_resultStandardScheme();
            }
        }

        private static class exists_resultStandardScheme extends StandardScheme<exists_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, exists_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, exists_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class exists_resultTupleSchemeFactory implements SchemeFactory {
            public exists_resultTupleScheme getScheme() {
                return new exists_resultTupleScheme();
            }
        }

        private static class exists_resultTupleScheme extends TupleScheme<exists_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, exists_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, exists_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class get_args implements org.apache.thrift.TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_args");

        private static final org.apache.thrift.protocol.TField CLIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientName", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("partition", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField SUB_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("subPartition", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short) 4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new get_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new get_argsTupleSchemeFactory());
        }

        public String clientName; // required
        public String partition; // required
        public String subPartition; // required
        public String messageId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CLIENT_NAME((short) 1, "clientName"),
            PARTITION((short) 2, "partition"),
            SUB_PARTITION((short) 3, "subPartition"),
            MESSAGE_ID((short) 4, "messageId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // CLIENT_NAME
                        return CLIENT_NAME;
                    case 2: // PARTITION
                        return PARTITION;
                    case 3: // SUB_PARTITION
                        return SUB_PARTITION;
                    case 4: // MESSAGE_ID
                        return MESSAGE_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CLIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PARTITION, new org.apache.thrift.meta_data.FieldMetaData("partition", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SUB_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("subPartition", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_args.class, metaDataMap);
        }

        public get_args() {
        }

        public get_args(
                String clientName,
                String partition,
                String subPartition,
                String messageId) {
            this();
            this.clientName = clientName;
            this.partition = partition;
            this.subPartition = subPartition;
            this.messageId = messageId;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public get_args(get_args other) {
            if (other.isSetClientName()) {
                this.clientName = other.clientName;
            }
            if (other.isSetPartition()) {
                this.partition = other.partition;
            }
            if (other.isSetSubPartition()) {
                this.subPartition = other.subPartition;
            }
            if (other.isSetMessageId()) {
                this.messageId = other.messageId;
            }
        }

        public get_args deepCopy() {
            return new get_args(this);
        }

        @Override
        public void clear() {
            this.clientName = null;
            this.partition = null;
            this.subPartition = null;
            this.messageId = null;
        }

        public String getClientName() {
            return this.clientName;
        }

        public get_args setClientName(String clientName) {
            this.clientName = clientName;
            return this;
        }

        public void unsetClientName() {
            this.clientName = null;
        }

        /**
         * Returns true if field clientName is set (has been assigned a value) and false otherwise
         */
        public boolean isSetClientName() {
            return this.clientName != null;
        }

        public void setClientNameIsSet(boolean value) {
            if (!value) {
                this.clientName = null;
            }
        }

        public String getPartition() {
            return this.partition;
        }

        public get_args setPartition(String partition) {
            this.partition = partition;
            return this;
        }

        public void unsetPartition() {
            this.partition = null;
        }

        /**
         * Returns true if field partition is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPartition() {
            return this.partition != null;
        }

        public void setPartitionIsSet(boolean value) {
            if (!value) {
                this.partition = null;
            }
        }

        public String getSubPartition() {
            return this.subPartition;
        }

        public get_args setSubPartition(String subPartition) {
            this.subPartition = subPartition;
            return this;
        }

        public void unsetSubPartition() {
            this.subPartition = null;
        }

        /**
         * Returns true if field subPartition is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSubPartition() {
            return this.subPartition != null;
        }

        public void setSubPartitionIsSet(boolean value) {
            if (!value) {
                this.subPartition = null;
            }
        }

        public String getMessageId() {
            return this.messageId;
        }

        public get_args setMessageId(String messageId) {
            this.messageId = messageId;
            return this;
        }

        public void unsetMessageId() {
            this.messageId = null;
        }

        /**
         * Returns true if field messageId is set (has been assigned a value) and false otherwise
         */
        public boolean isSetMessageId() {
            return this.messageId != null;
        }

        public void setMessageIdIsSet(boolean value) {
            if (!value) {
                this.messageId = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CLIENT_NAME:
                    if (value == null) {
                        unsetClientName();
                    } else {
                        setClientName((String) value);
                    }
                    break;

                case PARTITION:
                    if (value == null) {
                        unsetPartition();
                    } else {
                        setPartition((String) value);
                    }
                    break;

                case SUB_PARTITION:
                    if (value == null) {
                        unsetSubPartition();
                    } else {
                        setSubPartition((String) value);
                    }
                    break;

                case MESSAGE_ID:
                    if (value == null) {
                        unsetMessageId();
                    } else {
                        setMessageId((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CLIENT_NAME:
                    return getClientName();

                case PARTITION:
                    return getPartition();

                case SUB_PARTITION:
                    return getSubPartition();

                case MESSAGE_ID:
                    return getMessageId();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CLIENT_NAME:
                    return isSetClientName();
                case PARTITION:
                    return isSetPartition();
                case SUB_PARTITION:
                    return isSetSubPartition();
                case MESSAGE_ID:
                    return isSetMessageId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof get_args)
                return this.equals((get_args) that);
            return false;
        }

        public boolean equals(get_args that) {
            if (that == null)
                return false;

            boolean this_present_clientName = true && this.isSetClientName();
            boolean that_present_clientName = true && that.isSetClientName();
            if (this_present_clientName || that_present_clientName) {
                if (!(this_present_clientName && that_present_clientName))
                    return false;
                if (!this.clientName.equals(that.clientName))
                    return false;
            }

            boolean this_present_partition = true && this.isSetPartition();
            boolean that_present_partition = true && that.isSetPartition();
            if (this_present_partition || that_present_partition) {
                if (!(this_present_partition && that_present_partition))
                    return false;
                if (!this.partition.equals(that.partition))
                    return false;
            }

            boolean this_present_subPartition = true && this.isSetSubPartition();
            boolean that_present_subPartition = true && that.isSetSubPartition();
            if (this_present_subPartition || that_present_subPartition) {
                if (!(this_present_subPartition && that_present_subPartition))
                    return false;
                if (!this.subPartition.equals(that.subPartition))
                    return false;
            }

            boolean this_present_messageId = true && this.isSetMessageId();
            boolean that_present_messageId = true && that.isSetMessageId();
            if (this_present_messageId || that_present_messageId) {
                if (!(this_present_messageId && that_present_messageId))
                    return false;
                if (!this.messageId.equals(that.messageId))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(get_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            get_args typedOther = (get_args) other;

            lastComparison = Boolean.valueOf(isSetClientName()).compareTo(typedOther.isSetClientName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetClientName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientName, typedOther.clientName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPartition()).compareTo(typedOther.isSetPartition());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPartition()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition, typedOther.partition);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSubPartition()).compareTo(typedOther.isSetSubPartition());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSubPartition()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subPartition, typedOther.subPartition);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(typedOther.isSetMessageId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessageId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, typedOther.messageId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("get_args(");
            boolean first = true;

            sb.append("clientName:");
            if (this.clientName == null) {
                sb.append("null");
            } else {
                sb.append(this.clientName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("partition:");
            if (this.partition == null) {
                sb.append("null");
            } else {
                sb.append(this.partition);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("subPartition:");
            if (this.subPartition == null) {
                sb.append("null");
            } else {
                sb.append(this.subPartition);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("messageId:");
            if (this.messageId == null) {
                sb.append("null");
            } else {
                sb.append(this.messageId);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class get_argsStandardSchemeFactory implements SchemeFactory {
            public get_argsStandardScheme getScheme() {
                return new get_argsStandardScheme();
            }
        }

        private static class get_argsStandardScheme extends StandardScheme<get_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, get_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CLIENT_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.clientName = iprot.readString();
                                struct.setClientNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PARTITION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.partition = iprot.readString();
                                struct.setPartitionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SUB_PARTITION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.subPartition = iprot.readString();
                                struct.setSubPartitionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // MESSAGE_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.messageId = iprot.readString();
                                struct.setMessageIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, get_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.clientName != null) {
                    oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
                    oprot.writeString(struct.clientName);
                    oprot.writeFieldEnd();
                }
                if (struct.partition != null) {
                    oprot.writeFieldBegin(PARTITION_FIELD_DESC);
                    oprot.writeString(struct.partition);
                    oprot.writeFieldEnd();
                }
                if (struct.subPartition != null) {
                    oprot.writeFieldBegin(SUB_PARTITION_FIELD_DESC);
                    oprot.writeString(struct.subPartition);
                    oprot.writeFieldEnd();
                }
                if (struct.messageId != null) {
                    oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
                    oprot.writeString(struct.messageId);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class get_argsTupleSchemeFactory implements SchemeFactory {
            public get_argsTupleScheme getScheme() {
                return new get_argsTupleScheme();
            }
        }

        private static class get_argsTupleScheme extends TupleScheme<get_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, get_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetClientName()) {
                    optionals.set(0);
                }
                if (struct.isSetPartition()) {
                    optionals.set(1);
                }
                if (struct.isSetSubPartition()) {
                    optionals.set(2);
                }
                if (struct.isSetMessageId()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetClientName()) {
                    oprot.writeString(struct.clientName);
                }
                if (struct.isSetPartition()) {
                    oprot.writeString(struct.partition);
                }
                if (struct.isSetSubPartition()) {
                    oprot.writeString(struct.subPartition);
                }
                if (struct.isSetMessageId()) {
                    oprot.writeString(struct.messageId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, get_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.clientName = iprot.readString();
                    struct.setClientNameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.partition = iprot.readString();
                    struct.setPartitionIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.subPartition = iprot.readString();
                    struct.setSubPartitionIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.messageId = iprot.readString();
                    struct.setMessageIdIsSet(true);
                }
            }
        }

    }

    public static class get_result implements org.apache.thrift.TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new get_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new get_resultTupleSchemeFactory());
        }

        public String success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_result.class, metaDataMap);
        }

        public get_result() {
        }

        public get_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public get_result(get_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public get_result deepCopy() {
            return new get_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public get_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof get_result)
                return this.equals((get_result) that);
            return false;
        }

        public boolean equals(get_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(get_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;
            get_result typedOther = (get_result) other;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("get_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class get_resultStandardSchemeFactory implements SchemeFactory {
            public get_resultStandardScheme getScheme() {
                return new get_resultStandardScheme();
            }
        }

        private static class get_resultStandardScheme extends StandardScheme<get_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, get_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, get_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class get_resultTupleSchemeFactory implements SchemeFactory {
            public get_resultTupleScheme getScheme() {
                return new get_resultTupleScheme();
            }
        }

        private static class get_resultTupleScheme extends TupleScheme<get_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, get_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, get_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

}
